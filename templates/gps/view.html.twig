{% extends "base.html.twig" %}

{% block content %}

    <h1>{{ track.name }}</h1>

    {% for version in track.versions %}
        <a class="btn btn-success" href="{{ path('gps-download', {id: version.file.id}) }}">download, version {{ loop.revindex }}</a>
    {% endfor %}

    <div class="clearfix"></div>

    <a href="{{ path('gps-new-version', {id:track.id}) }}">add new version</a>

    <hr>

    <div style="height: 800px; width: 1000px;" id="map"></div>

    <canvas id="elevation" width="400" height="400"></canvas>

    <script>
        var map = L.map('map').setView(
            [
                ({{ track.pointNorthEastLat }} + {{ track.pointSouthWestLat }}) / 2,
                ({{ track.pointSouthWestLng + track.pointNorthEastLng}}) / 2
            ],
            12
        );
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        {% for version in track.versions %}
            (function() {
                var latlngs = [];
                var elevationData = [];
                var elevationLabels = [];

                {% set lastElevation = 0 %}

                {% for point in version.points %}
                    {% if loop.first %}
                    L.marker([{{ point.lat }}, {{ point.lng }}]).addTo(map)
                        .bindPopup('Start');
                    {% endif %}
                    {% if loop.last %}
                    L.marker([{{ point.lat }}, {{ point.lng }}]).addTo(map)
                        .bindPopup('End');
                    {% endif %}

                    latlngs.push([
                        {{ point.lat }},
                        {{ point.lng }}
                    ]);

                    {% if (lastElevation - point.elevation)|abs > 4.0 %}
                        elevationData.push({{ point.elevation }});
                        elevationLabels.push({{ loop.index }});
                        {% set lastElevation = point.elevation %}
                    {% endif %}

                {% endfor %}

                // @TODO change colors for different track versions
                var polyline = L.polyline(latlngs, {color: 'red'}).addTo(map);

                // elevation plot
                {% if loop.first %}
                    console.log(elevationData);
                    console.log(elevationLabels);
                    var ctx = document.getElementById('elevation').getContext('2d');
                    var myChart = new window.chartJs(ctx, {
                        type: 'line',
                        data: {
                            labels: elevationLabels,
                            datasets: [{
                                label: 'Elevation',
                                data: elevationData,

                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                yAxes: [{
                                    ticks: {
                                        beginAtZero: false
                                    }
                                }]
                            }
                        }
                    });
                {% endif %}
            })();
        {% endfor %}
    </script>
{% endblock %}
